import logging
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackContext
)
import os

# === –õ–æ–≥–∏ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "birthdays.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS birthdays (
    user_id INTEGER,
    chat_id INTEGER,
    username TEXT,
    birthday TEXT,
    remind_days_before INTEGER,
    custom_message TEXT,
    PRIMARY KEY (user_id, chat_id)
)
""")
conn.commit()

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è üéÇ\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_birthday –î–î.–ú–ú [–¥–Ω–∏_–¥–æ] [—Ç–µ–∫—Å—Ç]\n"
        "/my_birthday ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –î–†\n"
        "/list_birthdays ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞—Ç—ã –≤ —á–∞—Ç–µ\n"
        "/delete_birthday ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–≤–æ–π –î–†"
    )

async def set_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) < 1:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /set_birthday –î–î.–ú–ú [–¥–Ω–∏_–¥–æ] [—Ç–µ–∫—Å—Ç]")
            return

        date_str = context.args[0]
        datetime.strptime(date_str, "%d.%m")  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞

        remind_days = int(context.args[1]) if len(context.args) >= 2 and context.args[1].isdigit() else 0
        custom_msg = " ".join(context.args[2:]) if len(context.args) > 2 else None

        cursor.execute("""
            REPLACE INTO birthdays (user_id, chat_id, username, birthday, remind_days_before, custom_message)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (
            update.effective_user.id,
            update.effective_chat.id,
            update.effective_user.first_name,
            date_str,
            remind_days,
            custom_msg
        ))
        conn.commit()

        await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {date_str}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {remind_days} –¥–Ω–µ–π")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú")

async def my_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("""
        SELECT birthday, remind_days_before, custom_message
        FROM birthdays WHERE user_id=? AND chat_id=?
    """, (update.effective_user.id, update.effective_chat.id))
    data = cursor.fetchone()
    if data:
        await update.message.reply_text(f"üéÇ –î–∞—Ç–∞: {data[0]}\n‚è≥ –ó–∞ {data[1]} –¥–Ω–µ–π\nüí¨ {data[2]}")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –¢—ã –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª –¥–∞—Ç—É.")

async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("""
        SELECT username, birthday, remind_days_before
        FROM birthdays WHERE chat_id=?
    """, (update.effective_chat.id,))
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("üì≠ –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")
        return

    text = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
    for username, birthday, remind_days in rows:
        text += f"‚Ä¢ {username} ‚Äî {birthday} (–∑–∞ {remind_days} –¥–Ω–µ–π)\n"
    await update.message.reply_text(text)

async def delete_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("DELETE FROM birthdays WHERE user_id=? AND chat_id=?",
                   (update.effective_user.id, update.effective_chat.id))
    conn.commit()
    await update.message.reply_text("üóë –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è ===
async def check_birthdays(context: CallbackContext):
    today_str = datetime.now().strftime("%d.%m")
    now = datetime.now()

    cursor.execute("SELECT user_id, chat_id, username, birthday, remind_days_before, custom_message FROM birthdays")
    for row in cursor.fetchall():
        user_id, chat_id, username, birthday, remind_days, custom_msg = row
        bday_date = datetime.strptime(birthday, "%d.%m").replace(year=now.year)

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ N –¥–Ω–µ–π
        if remind_days > 0 and (bday_date - now).days == remind_days:
            text = custom_msg or f"üéâ –£ {username} —Å–∫–æ—Ä–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!"
            await context.bot.send_message(chat_id=chat_id, text=text.replace("{username}", username))

        # –í —Å–∞–º –¥–µ–Ω—å
        if bday_date.strftime("%d.%m") == today_str:
            text = custom_msg or f"üéÇ –£ {username} —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!"
            await context.bot.send_message(chat_id=chat_id, text=text.replace("{username}", username))

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set_birthday", set_birthday))
    app.add_handler(CommandHandler("my_birthday", my_birthday))
    app.add_handler(CommandHandler("list_birthdays", list_birthdays))
    app.add_handler(CommandHandler("delete_birthday", delete_birthday))

    app.job_queue.run_repeating(check_birthdays, interval=86400, first=5)

    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
